import React, { useEffect, useState } from "react"
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  RefreshControl, 
  Alert, 
  Animated,
  TouchableOpacity,
  Dimensions,
  SafeAreaView
} from "react-native"
import { LinearGradient } from 'expo-linear-gradient'
import { Card, Badge } from "../components/ui"
import { EnhancedCard, ModernButton, ProfessionalBadge, LoadingOverlay, StatsCard } from "../components/modernUI"
import { theme } from "../theme/colors"
import { Ionicons } from "@expo/vector-icons"
import * as Location from "expo-location"
import { weatherService, type MarineWeather } from "../services/weather"
import { useTranslation } from 'react-i18next'

const { width, height } = Dimensions.get('window')

interface WeatherScreenProps {
  onBack?: () => void
}

// Enhanced design system for Weather Screen
const weatherDesign = {
  spacing: {
    xs: width * 0.01,
    sm: width * 0.02,
    md: width * 0.04,
    lg: width * 0.06,
    xl: width * 0.08,
  },
  borderRadius: {
    sm: 8,
    md: 12,
    lg: 16,
    xl: 20,
  },
  typography: {
    h1: Math.min(width * 0.08, 32),
    h2: Math.min(width * 0.06, 24),
    h3: Math.min(width * 0.05, 20),
    body: Math.min(width * 0.04, 16),
    caption: Math.min(width * 0.035, 14),
    small: Math.min(width * 0.03, 12),
  },
  shadows: {
    light: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    medium: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.15,
      shadowRadius: 8,
      elevation: 5,
    },
  },
  colors: {
    primary: '#0F766E',
    primaryLight: '#14B8A6',
    secondary: '#0891B2',
    accent: '#F59E0B',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444',
    surface: '#FFFFFF',
    surfaceSecondary: '#F8FAFC',
    text: '#1F2937',
    textSecondary: '#6B7280',
    textLight: '#9CA3AF',
  }
}

export default function WeatherScreen({ onBack }: WeatherScreenProps) {
  const { t } = useTranslation()
  const [weather, setWeather] = useState<MarineWeather | null>(null)
  const [loading, setLoading] = useState(false)
  const [refreshing, setRefreshing] = useState(false)
  const [position, setPosition] = useState<{ lat: number; lon: number } | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [showQuickActions, setShowQuickActions] = useState(false)
  const fadeAnim = useState(new Animated.Value(0))[0]

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start()
  }, [])

  const fetchWeatherData = async () => {
    if (!position) return
    
    setLoading(true)
    setError(null)
    
    try {
      const data = await weatherService.getCurrentWeather(position.lat, position.lon)
      setWeather(data)
    } catch (err) {
      console.error("Weather fetch error:", err)
      setError("Failed to fetch weather data. Please check your internet connection.")
    } finally {
      setLoading(false)
    }
  }

  const onRefresh = async () => {
    setRefreshing(true)
    await fetchWeatherData()
    setRefreshing(false)
  }

  const quickPlanTrip = () => {
    if (!weather) return
    
    if (weather.fishingConditions === "Dangerous") {
      Alert.alert(
        `⚠️ ${t('weather.dangerous')} ${t('weather.fishing_conditions')}`,
        t('alerts.severe_weather'),
        [{ text: t('common.ok') }]
      )
      return
    }
    
    Alert.alert(
      `🎣 ${t('trip_planner.smart_route')}`,
      `${t('weather.fishing_conditions')} ${t('common.are')} ${weather.fishingConditions.toLowerCase()}. ${t('common.plan_trip')} ${t('common.now')}?`,
      [
        { text: t('common.cancel'), style: "cancel" },
        { text: t('common.plan_trip'), onPress: () => {
          console.log("Navigate to trip planner with weather data")
          // Navigate to trip planner screen
        }}
      ]
    )
  }

  const shareWeatherAlert = () => {
    if (!weather) return
    
    const message = `🌊 Marine Weather Alert\n` +
      `Conditions: ${weather.fishingConditions}\n` +
      `Temperature: ${weather.temperature}°C\n` +
      `Wind: ${weather.windSpeed} km/h\n` +
      `Wave Height: ${weather.waveHeight}m\n` +
      `\nGenerated by SeaSure App`
    
    Alert.alert("Share Weather", message, [
      { text: "Cancel", style: "cancel" },
      { text: "Share", onPress: () => console.log("Share weather data") }
    ])
  }

  const getLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync()
      if (status !== "granted") {
        Alert.alert("Permission needed", "Location access is required for marine weather data.")
        return
      }

      const loc = await Location.getCurrentPositionAsync({ 
        accuracy: Location.Accuracy.Balanced 
      })
      
      setPosition({ 
        lat: loc.coords.latitude, 
        lon: loc.coords.longitude 
      })
    } catch (error) {
      console.error("Location error:", error)
      setError("Could not get your location. Using default coordinates.")
      // Default to Mumbai coast
      setPosition({ lat: 19.0760, lon: 72.8777 })
    }
  }

  useEffect(() => {
    getLocation()
  }, [])

  useEffect(() => {
    if (position) {
      fetchWeatherData()
    }
  }, [position])

  const getConditionIcon = (condition: string) => {
    switch (condition) {
      case "Excellent": return "sunny"
      case "Good": return "partly-sunny"
      case "Poor": return "cloudy"
      case "Dangerous": return "thunderstorm"
      default: return "help-circle"
    }
  }

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case "Excellent": return "#10b981"
      case "Good": return "#3b82f6"
      case "Poor": return "#f59e0b"
      case "Dangerous": return "#ef4444"
      default: return theme.muted
    }
  }

  if (error && !weather) {
    return (
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        <View style={styles.centerContent}>
          <Ionicons name="warning" size={64} color={theme.warn} />
          <Text style={styles.errorTitle}>{t('weather.unable_to_load')}</Text>
          <Text style={styles.errorText}>{error}</Text>
          <ModernButton
            title={t('common.retry')}
            icon="refresh"
            onPress={fetchWeatherData}
            style={styles.retryButton}
          />
        </View>
      </Animated.View>
    )
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        
        {/* Enhanced Navigation Header */}
        <LinearGradient
          colors={[theme.primary, "#0891b2", "#06b6d4"]}
          style={styles.navHeader}
        >
          <View style={styles.navContainer}>
            {onBack && (
              <TouchableOpacity onPress={onBack} style={styles.navBackButton}>
                <Ionicons name="arrow-back" size={28} color="#ffffff" />
              </TouchableOpacity>
            )}
            <View style={styles.navTitleContainer}>
              <Text style={styles.navTitle}>{t('weather.title')}</Text>
              <Text style={styles.navSubtitle}>{t('weather.real_time_conditions')}</Text>
            </View>
            
            {weather && (
              <TouchableOpacity 
                style={styles.navActionButton}
                onPress={() => setShowQuickActions(!showQuickActions)}
              >
                <Ionicons name="ellipsis-vertical" size={28} color="#ffffff" />
              </TouchableOpacity>
            )}
          </View>

          {position && (
            <View style={styles.navLocationContainer}>
              <Ionicons name="location" size={16} color="rgba(255, 255, 255, 0.8)" />
              <Text style={styles.navLocationText}>
                {position.lat.toFixed(4)}°N, {position.lon.toFixed(4)}°E
              </Text>
            </View>
          )}
        </LinearGradient>

        <ScrollView 
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl 
              refreshing={refreshing} 
              onRefresh={onRefresh}
              tintColor={weatherDesign.colors.primary}
            colors={[theme.primary]}
          />
        }
        contentContainerStyle={styles.scrollContent}
      >

        {/* Quick Actions */}
        {showQuickActions && weather && (
          <Animated.View style={styles.quickActionsPanel}>
            <TouchableOpacity style={styles.quickAction} onPress={quickPlanTrip}>
              <Ionicons name="navigate" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Plan Trip</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAction} onPress={shareWeatherAlert}>
              <Ionicons name="share" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Share Alert</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAction} onPress={onRefresh}>
              <Ionicons name="refresh" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Refresh</Text>
            </TouchableOpacity>
          </Animated.View>
        )}
        
        {weather ? (
          <>
            {/* Hero Weather Card */}
            <View style={styles.heroWeatherCard}>
              <LinearGradient
                colors={['#E0F2FE', '#F0F9FF']}
                style={styles.heroCardContent}
              >
                <View style={styles.weatherIconContainer}>
                  <Ionicons 
                    name={getConditionIcon(weather.fishingConditions)} 
                    size={width * 0.15} 
                    color={getConditionColor(weather.fishingConditions)} 
                  />
                </View>
                <Text style={styles.heroTemperature}>{weather.temperature}°C</Text>
                <View style={styles.conditionBadge}>
                  <Text style={styles.conditionText}>{weather.fishingConditions}</Text>
                </View>
              </LinearGradient>
            </View>

            {/* Bold Fishing Decision Card */}
            <View style={styles.fishingDecisionCard}>
              <LinearGradient
                colors={
                  weather.fishingConditions === "Excellent" || weather.fishingConditions === "Good" 
                    ? ['#10B981', '#059669'] 
                    : weather.fishingConditions === "Fair" 
                    ? ['#F59E0B', '#D97706'] 
                    : ['#EF4444', '#DC2626']
                }
                style={styles.fishingDecisionGradient}
              >
                <Ionicons 
                  name={
                    weather.fishingConditions === "Excellent" || weather.fishingConditions === "Good" 
                      ? "checkmark-circle" 
                      : weather.fishingConditions === "Fair" 
                      ? "warning" 
                      : "close-circle"
                  } 
                  size={32} 
                  color="#FFFFFF" 
                />
                <Text style={styles.fishingDecisionTitle}>
                  {weather.fishingConditions === "Excellent" || weather.fishingConditions === "Good" 
                    ? "🎣 GO FISHING!" 
                    : weather.fishingConditions === "Fair" 
                    ? "⚖️ PROCEED WITH CAUTION" 
                    : "🚨 DO NOT GO FISHING!"}
                </Text>
                <Text style={styles.fishingDecisionSubtitle}>
                  {weather.fishingConditions === "Excellent" 
                    ? "Perfect conditions - All fishing activities recommended"
                    : weather.fishingConditions === "Good" 
                    ? "Good conditions - Standard safety precautions"
                    : weather.fishingConditions === "Fair" 
                    ? "Moderate conditions - Experienced anglers only"
                    : weather.fishingConditions === "Poor"
                    ? "Challenging conditions - Stay close to shore"
                    : "Dangerous conditions - Return to shore immediately"}
                </Text>
              </LinearGradient>
            </View>

            {/* Responsive Weather Metrics Grid */}
            <View style={styles.weatherMetricsGrid}>
              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.primary, weatherDesign.colors.primaryLight]}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="speedometer" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.windSpeed}</Text>
                <Text style={styles.metricUnit}>km/h</Text>
                <Text style={styles.metricLabel}>{t('weather.wind_speed')}</Text>
                <Text style={styles.metricSubtext}>{weather.windDirection}° {t('weather.wind_direction')}</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.secondary, '#38BDF8']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="water" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.waveHeight}</Text>
                <Text style={styles.metricUnit}>m</Text>
                <Text style={styles.metricLabel}>{t('weather.wave_height')}</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.success, '#34D399']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="eye" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.visibility}</Text>
                <Text style={styles.metricUnit}>km</Text>
                <Text style={styles.metricLabel}>{t('weather.visibility')}</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.accent, '#FCD34D']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="water-outline" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.humidity}</Text>
                <Text style={styles.metricUnit}>%</Text>
                <Text style={styles.metricLabel}>Humidity</Text>
              </View>
            </View>

            {/* Additional Weather Information */}
            <View style={styles.additionalInfoContainer}>
              <View style={styles.infoCard}>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Pressure</Text>
                  <Text style={styles.infoValue}>{weather.pressure} hPa</Text>
                </View>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>UV Index</Text>
                  <Text style={styles.infoValue}>{weather.uvIndex}</Text>
                </View>
              </View>
            </View>

            {/* Weather Warnings */}
            {weather.warnings.length > 0 && (
              <View style={styles.warningsCard}>
                <View style={styles.warningsHeader}>
                  <LinearGradient
                    colors={[weatherDesign.colors.warning, '#FCD34D']}
                    style={styles.warningIconContainer}
                  >
                    <Ionicons name="warning" size={20} color="#FFFFFF" />
                  </LinearGradient>
                  <Text style={styles.warningsTitle}>Weather Alerts</Text>
                </View>
                <View style={styles.warningsList}>
                  {weather.warnings.map((warning, index) => (
                    <View key={index} style={styles.warningItem}>
                      <Ionicons name="alert-circle" size={16} color={weatherDesign.colors.warning} />
                      <Text style={styles.warningText}>{warning}</Text>
                    </View>
                  ))}
                </View>
              </View>
            )}

            {/* Enhanced AI Fishing Recommendations */}
            <View style={styles.recommendationsCard}>
              <View style={styles.recommendationHeader}>
                <LinearGradient
                  colors={[weatherDesign.colors.primary, weatherDesign.colors.primaryLight]}
                  style={styles.fishIconContainer}
                >
                  <Ionicons name="fish" size={20} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.recommendationsTitle}>Smart Fishing Insights</Text>
              </View>
              
              {/* Primary Recommendation */}
              <View style={styles.primaryRecommendation}>
                <Text style={styles.conditionBadgeText}>
                  {weather.fishingConditions === "Excellent" && "🎣 PERFECT CONDITIONS"}
                  {weather.fishingConditions === "Good" && "🌊 GOOD CONDITIONS"}
                  {weather.fishingConditions === "Fair" && "⚖️ FAIR CONDITIONS"}
                  {weather.fishingConditions === "Poor" && "⚠️ CHALLENGING CONDITIONS"}
                  {weather.fishingConditions === "Dangerous" && "🚨 DANGEROUS CONDITIONS"}
                </Text>
                
                <Text style={styles.primaryRecommendationText}>
                  {weather.fishingConditions === "Excellent" && 
                    `Perfect day for deep sea fishing! With ${weather.windSpeed}km/h winds and ${weather.visibility}km visibility, all fishing techniques are recommended. Water conditions are calm at ${weather.waveHeight}m wave height.`}
                  {weather.fishingConditions === "Good" && 
                    `Good fishing weather with manageable conditions. Wind speed of ${weather.windSpeed}km/h and ${weather.visibility}km visibility provide safe offshore opportunities. Wave height: ${weather.waveHeight}m.`}
                  {weather.fishingConditions === "Fair" && 
                    `Moderate conditions suitable for experienced anglers. Wind: ${weather.windSpeed}km/h, Visibility: ${weather.visibility}km, Waves: ${weather.waveHeight}m. Stay within familiar waters.`}
                  {weather.fishingConditions === "Poor" && 
                    `Challenging conditions detected. High winds (${weather.windSpeed}km/h) and reduced visibility (${weather.visibility}km) make offshore fishing risky. Consider shore-based alternatives.`}
                  {weather.fishingConditions === "Dangerous" && 
                    `Dangerous conditions - DO NOT FISH! Wind: ${weather.windSpeed}km/h, Visibility: ${weather.visibility}km, Waves: ${weather.waveHeight}m. Return to shore immediately if already out.`}
                </Text>
              </View>

              {/* Detailed Weather-Based Recommendations */}
              <View style={styles.detailedRecommendations}>
                {/* Wind Conditions */}
                <View style={styles.recommendationItem}>
                  <Ionicons 
                    name="flag" 
                    size={16} 
                    color={weather.windSpeed <= 15 ? weatherDesign.colors.success : weather.windSpeed <= 25 ? weatherDesign.colors.warning : weatherDesign.colors.error} 
                  />
                  <View style={styles.recommendationContent}>
                    <Text style={styles.recommendationTitle}>Wind Analysis</Text>
                    <Text style={styles.recommendationDetail}>
                      {weather.windSpeed <= 10 && "Light winds - Perfect for trolling and drift fishing"}
                      {weather.windSpeed > 10 && weather.windSpeed <= 20 && "Moderate winds - Good for anchored fishing, adjust for drift"}
                      {weather.windSpeed > 20 && weather.windSpeed <= 30 && "Strong winds - Use heavier tackle, consider windward protection"}
                      {weather.windSpeed > 30 && "Very high winds - Unsafe for small boats, postpone trip"}
                    </Text>
                  </View>
                </View>

                {/* Visibility Impact */}
                <View style={styles.recommendationItem}>
                  <Ionicons 
                    name="eye" 
                    size={16} 
                    color={weather.visibility >= 5 ? weatherDesign.colors.success : weather.visibility >= 2 ? weatherDesign.colors.warning : weatherDesign.colors.error} 
                  />
                  <View style={styles.recommendationContent}>
                    <Text style={styles.recommendationTitle}>Visibility Impact</Text>
                    <Text style={styles.recommendationDetail}>
                      {weather.visibility >= 10 && "Excellent visibility - Safe for long-range navigation and offshore fishing"}
                      {weather.visibility >= 5 && weather.visibility < 10 && "Good visibility - Maintain visual contact with landmarks"}
                      {weather.visibility >= 2 && weather.visibility < 5 && "Reduced visibility - Use GPS, stay close to familiar areas"}
                      {weather.visibility < 2 && "Poor visibility - Navigation hazard, avoid offshore fishing"}
                    </Text>
                  </View>
                </View>

                {/* Wave Conditions */}
                <View style={styles.recommendationItem}>
                  <Ionicons 
                    name="water" 
                    size={16} 
                    color={weather.waveHeight <= 1 ? weatherDesign.colors.success : weather.waveHeight <= 2 ? weatherDesign.colors.warning : weatherDesign.colors.error} 
                  />
                  <View style={styles.recommendationContent}>
                    <Text style={styles.recommendationTitle}>Sea State</Text>
                    <Text style={styles.recommendationDetail}>
                      {weather.waveHeight <= 0.5 && "Calm seas - Ideal for all vessel sizes and fishing methods"}
                      {weather.waveHeight > 0.5 && weather.waveHeight <= 1.5 && "Slight chop - Good for experienced anglers, secure equipment"}
                      {weather.waveHeight > 1.5 && weather.waveHeight <= 2.5 && "Rough seas - Large boats only, expect challenging conditions"}
                      {weather.waveHeight > 2.5 && "Very rough - Dangerous for recreational fishing, seek shelter"}
                    </Text>
                  </View>
                </View>

                {/* Pressure Trends */}
                <View style={styles.recommendationItem}>
                  <Ionicons 
                    name="speedometer" 
                    size={16} 
                    color={weather.pressure >= 1020 ? weatherDesign.colors.success : weather.pressure >= 1010 ? weatherDesign.colors.warning : weatherDesign.colors.error} 
                  />
                  <View style={styles.recommendationContent}>
                    <Text style={styles.recommendationTitle}>Barometric Pressure</Text>
                    <Text style={styles.recommendationDetail}>
                      {weather.pressure >= 1020 && "High pressure - Stable weather, fish may be deeper, try bottom fishing"}
                      {weather.pressure >= 1010 && weather.pressure < 1020 && "Normal pressure - Good fishing conditions across all depths"}
                      {weather.pressure < 1010 && "Low pressure - Fish active near surface, weather may deteriorate"}
                    </Text>
                  </View>
                </View>

                {/* Temperature Impact */}
                <View style={styles.recommendationItem}>
                  <Ionicons 
                    name="thermometer" 
                    size={16} 
                    color={weatherDesign.colors.primary} 
                  />
                  <View style={styles.recommendationContent}>
                    <Text style={styles.recommendationTitle}>Water Temperature</Text>
                    <Text style={styles.recommendationDetail}>
                      {weather.temperature >= 25 && "Warm water - Fish deeper waters during midday, early morning/evening best"}
                      {weather.temperature >= 15 && weather.temperature < 25 && "Optimal temperature - Fish active at various depths throughout day"}
                      {weather.temperature < 15 && "Cool water - Fish slower metabolism, use smaller baits, fish deeper"}
                    </Text>
                  </View>
                </View>

                {/* UV Protection */}
                {weather.uvIndex > 6 && (
                  <View style={styles.recommendationItem}>
                    <Ionicons name="sunny" size={16} color={weatherDesign.colors.warning} />
                    <View style={styles.recommendationContent}>
                      <Text style={styles.recommendationTitle}>UV Protection</Text>
                      <Text style={styles.recommendationDetail}>
                        High UV index ({weather.uvIndex}) - Wear sunscreen, hat, and protective clothing. Seek shade during peak hours.
                      </Text>
                    </View>
                  </View>
                )}
              </View>

              {/* Best Times Recommendation */}
              <View style={styles.timingRecommendation}>
                <Text style={styles.timingTitle}>🕐 Optimal Fishing Times</Text>
                <Text style={styles.timingDetail}>
                  {weather.fishingConditions === "Excellent" && "All day fishing recommended. Dawn (5:30-7:30 AM) and dusk (6:00-8:00 PM) for peak activity."}
                  {weather.fishingConditions === "Good" && "Best windows: Early morning (6:00-9:00 AM) and late afternoon (4:00-7:00 PM)."}
                  {weather.fishingConditions === "Fair" && "Short sessions recommended. Target dawn or dusk when conditions are most stable."}
                  {(weather.fishingConditions === "Poor" || weather.fishingConditions === "Dangerous") && "Wait for weather improvement. Monitor conditions closely."}
                </Text>
              </View>
            </View>
          </>
        ) : (
          <View style={styles.centerContent}>
            <Ionicons name="cloud-download" size={64} color={theme.muted} />
            <Text style={styles.loadingTitle}>Loading Weather Data</Text>
            <Text style={styles.loadingText}>Fetching real-time marine conditions...</Text>
          </View>
        )}
      </ScrollView>
      
      {/* Loading Overlay */}
      {loading && <LoadingOverlay visible={true} message="Updating weather data..." />}
      </Animated.View>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: weatherDesign.colors.surface,
  },
  container: {
    flex: 1,
    backgroundColor: weatherDesign.colors.surfaceSecondary,
  },
  scrollContent: {
    paddingBottom: weatherDesign.spacing.xl * 2,
    paddingHorizontal: weatherDesign.spacing.sm,
  },

  // Enhanced Navigation Header Styles
  navHeader: {
    paddingBottom: 20,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  navContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: 60,
    paddingBottom: 15,
  },
  navBackButton: {
    padding: 12,
    borderRadius: 50,
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
  },
  navTitleContainer: {
    flex: 1,
    alignItems: 'center',
    marginHorizontal: 20,
  },
  navTitle: {
    fontSize: 22,
    fontWeight: '800',
    color: '#ffffff',
    textAlign: 'center',
    marginBottom: 2,
  },
  navSubtitle: {
    fontSize: 14,
    color: 'rgba(255, 255, 255, 0.9)',
    fontWeight: '500',
    textAlign: 'center',
  },
  navActionButton: {
    padding: 12,
    borderRadius: 50,
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
  },
  navLocationContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
    paddingBottom: 15,
    gap: 6,
  },
  navLocationText: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.8)',
    fontWeight: '500',
  },

  header: {
    paddingHorizontal: weatherDesign.spacing.md,
    paddingVertical: weatherDesign.spacing.lg,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: weatherDesign.typography.h1,
    fontWeight: '800',
    color: '#FFFFFF',
    marginBottom: 4,
    letterSpacing: 0.5,
  },
  headerSubtitle: {
    fontSize: weatherDesign.typography.caption,
    color: 'rgba(255, 255, 255, 0.9)',
    fontWeight: '500',
    marginBottom: weatherDesign.spacing.sm,
  },
  locationContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginTop: weatherDesign.spacing.xs,
  },
  locationText: {
    fontSize: weatherDesign.typography.small,
    color: 'rgba(255, 255, 255, 0.8)',
    fontWeight: '500',
  },
  heroWeatherCard: {
    marginHorizontal: weatherDesign.spacing.md,
    marginVertical: weatherDesign.spacing.md,
    borderRadius: weatherDesign.borderRadius.xl,
    overflow: 'hidden',
    ...weatherDesign.shadows.medium,
  },
  heroCardContent: {
    alignItems: 'center',
    paddingVertical: weatherDesign.spacing.xl,
    paddingHorizontal: weatherDesign.spacing.lg,
  },
  weatherIconContainer: {
    width: Math.min(width * 0.25, 120),
    height: Math.min(width * 0.25, 120),
    borderRadius: Math.min(width * 0.125, 60),
    backgroundColor: 'rgba(15, 118, 110, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: weatherDesign.spacing.md,
  },
  heroTemperature: {
    fontSize: Math.min(width * 0.15, 48),
    fontWeight: '900',
    color: weatherDesign.colors.text,
    marginBottom: weatherDesign.spacing.sm,
  },
  conditionBadge: {
    backgroundColor: weatherDesign.colors.primary,
    paddingHorizontal: weatherDesign.spacing.md,
    paddingVertical: weatherDesign.spacing.sm,
    borderRadius: weatherDesign.borderRadius.lg,
  },
  conditionText: {
    fontSize: weatherDesign.typography.body,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  weatherMetricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    paddingHorizontal: weatherDesign.spacing.md,
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.md,
    justifyContent: 'center',
  },
  metricCard: {
    width: (width - (weatherDesign.spacing.md * 2) - weatherDesign.spacing.sm) / 2,
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    padding: weatherDesign.spacing.md,
    alignItems: 'center',
    ...weatherDesign.shadows.light,
    minHeight: height * 0.15,
  },
  metricIconContainer: {
    width: Math.min(width * 0.12, 48),
    height: Math.min(width * 0.12, 48),
    borderRadius: Math.min(width * 0.06, 24),
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: weatherDesign.spacing.sm,
  },
  metricValue: {
    fontSize: Math.min(width * 0.06, 24),
    fontWeight: '800',
    color: weatherDesign.colors.text,
  },
  metricUnit: {
    fontSize: weatherDesign.typography.small,
    color: weatherDesign.colors.textLight,
    fontWeight: '500',
  },
  metricLabel: {
    fontSize: weatherDesign.typography.caption,
    color: weatherDesign.colors.textSecondary,
    fontWeight: '600',
    textAlign: 'center',
    marginTop: weatherDesign.spacing.xs,
  },
  metricSubtext: {
    fontSize: weatherDesign.typography.small,
    color: weatherDesign.colors.textLight,
    textAlign: 'center',
    marginTop: 2,
  },
  additionalInfoContainer: {
    paddingHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
  },
  infoCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: weatherDesign.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  infoLabel: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    fontWeight: '500',
  },
  infoValue: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.text,
    fontWeight: '700',
  },
  warningsCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  warningsHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.sm,
  },
  warningIconContainer: {
    width: Math.min(width * 0.09, 36),
    height: Math.min(width * 0.09, 36),
    borderRadius: Math.min(width * 0.045, 18),
    justifyContent: 'center',
    alignItems: 'center',
  },
  warningsTitle: {
    fontSize: weatherDesign.typography.h3,
    fontWeight: '700',
    color: weatherDesign.colors.text,
  },
  warningsList: {
    gap: weatherDesign.spacing.sm,
  },
  warningItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    padding: weatherDesign.spacing.sm,
    backgroundColor: '#FEF3C7',
    borderRadius: weatherDesign.borderRadius.sm,
  },
  warningText: {
    fontSize: weatherDesign.typography.caption,
    color: weatherDesign.colors.text,
    flex: 1,
  },
  recommendationsCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.sm,
  },
  fishIconContainer: {
    width: Math.min(width * 0.09, 36),
    height: Math.min(width * 0.09, 36),
    borderRadius: Math.min(width * 0.045, 18),
    justifyContent: 'center',
    alignItems: 'center',
  },
  recommendationsTitle: {
    fontSize: weatherDesign.typography.h3,
    fontWeight: '700',
    color: weatherDesign.colors.text,
  },
  recommendationsText: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    lineHeight: Math.min(width * 0.055, 22),
  },
  centerContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: weatherDesign.spacing.xl,
  },
  loadingTitle: {
    fontSize: weatherDesign.typography.h2,
    fontWeight: '700',
    color: weatherDesign.colors.text,
    marginTop: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.sm,
  },
  loadingText: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    textAlign: 'center',
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: theme.fg,
    marginTop: 16,
    marginBottom: 8,
  },
  errorText: {
    fontSize: 16,
    color: theme.muted,
    textAlign: "center",
    marginBottom: 24,
  },
  retryButton: {
    marginTop: 16,
  },

  
  // Enhanced UI styles
  headerLeft: {
    flex: 1,
  },
  headerAction: {
    padding: 8,
    borderRadius: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  quickActionsPanel: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    gap: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  quickAction: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    backgroundColor: 'rgba(15, 118, 110, 0.1)',
  },
  quickActionText: {
    fontSize: 14,
    fontWeight: '600',
    color: theme.primary,
  },

  // Enhanced Recommendation Styles
  primaryRecommendation: {
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 16,
    padding: weatherDesign.spacing.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.lg,
    borderLeftWidth: 4,
    borderLeftColor: weatherDesign.colors.primary,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  conditionBadgeText: {
    fontSize: Math.min(width * 0.035, 14),
    fontWeight: '800',
    color: weatherDesign.colors.primary,
    letterSpacing: 0.5,
    marginBottom: 8,
  },
  primaryRecommendationText: {
    fontSize: Math.min(width * 0.04, 16),
    color: weatherDesign.colors.text,
    lineHeight: Math.min(width * 0.055, 22),
    fontWeight: '500',
  },
  detailedRecommendations: {
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    borderRadius: 16,
    padding: weatherDesign.spacing.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.lg,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 6,
    elevation: 3,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
    paddingVertical: weatherDesign.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.05)',
  },
  recommendationContent: {
    flex: 1,
  },
  recommendationTitle: {
    fontSize: Math.min(width * 0.035, 14),
    fontWeight: '700',
    color: weatherDesign.colors.text,
    marginBottom: 4,
    letterSpacing: 0.3,
  },
  recommendationDetail: {
    fontSize: Math.min(width * 0.032, 13),
    color: weatherDesign.colors.textSecondary,
    lineHeight: Math.min(width * 0.045, 18),
  },
  timingRecommendation: {
    backgroundColor: 'rgba(15, 118, 110, 0.05)',
    borderRadius: 16,
    padding: weatherDesign.spacing.lg,
    marginHorizontal: weatherDesign.spacing.md,
    borderWidth: 1,
    borderColor: 'rgba(15, 118, 110, 0.1)',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  timingTitle: {
    fontSize: Math.min(width * 0.04, 16),
    fontWeight: '700',
    color: weatherDesign.colors.primary,
    marginBottom: 8,
  },
  timingDetail: {
    fontSize: Math.min(width * 0.035, 14),
    color: weatherDesign.colors.text,
    lineHeight: Math.min(width * 0.045, 18),
  },

  // Bold Fishing Decision Styles
  fishingDecisionCard: {
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.lg,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 8,
  },
  fishingDecisionGradient: {
    padding: weatherDesign.spacing.xl,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: Math.min(width * 0.35, 140),
  },
  fishingDecisionTitle: {
    fontSize: Math.min(width * 0.055, 22),
    fontWeight: '900',
    color: '#FFFFFF',
    textAlign: 'center',
    marginTop: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.xs,
    letterSpacing: 1.2,
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  fishingDecisionSubtitle: {
    fontSize: Math.min(width * 0.038, 15),
    fontWeight: '600',
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
    marginTop: weatherDesign.spacing.xs,
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 1,
  },
})
